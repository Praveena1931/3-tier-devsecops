name: NodeJS CI/CD Pipeline

on:
  push
    

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SCANNER_HOME: /opt/sonar-scanner
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'

      - name: Check Frontend JS files
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +

      - name: Check Backend JS files
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +

      - name: Run Gitleaks Scan (Client + API)
        run: |
            curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz -o gitleaks.tar.gz
            tar -xzf gitleaks.tar.gz
            sudo mv gitleaks /usr/local/bin/

            gitleaks detect --source ./api --exit-code 1 --report-path gitleaks-api-report.json
            gitleaks detect --source ./client --exit-code 1 --report-path gitleaks-client-report.json



    #   - name: Gitleaks Scan API
    #     uses: zricethezav/gitleaks-action@v2
    #     with:
    #       args: detect --source ./api --report-path api-gitleaks-report.json
    #       report_format: json
    #       report_name: gitleaks-api

    #   - name: Gitleaks Scan Client
    #     uses: zricethezav/gitleaks-action@v2
    #     with:
    #       args: detect --source ./client --report-path client-gitleaks-report.json
    #       report_format: json
    #       report_name: gitleaks-client


    #   - name: Run GitLeaks
    #     uses: zricethezav/gitleaks-action@v2
    #     with:
    #       args: detect --source ./client --exit-code 1

    # #   - name: Run Gitleaks
    # #     run: |
    # #          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64.tar.gz | tar -xz
    # #          ./gitleaks detect --source ./api --exit-code 1


    #   - name: Run GitLeaks (Backend)
    #     uses: zricethezav/gitleaks-action@v2
    #     with:
    #           args: detect --source ./api --exit-code 1
    #           upload_artifact: false
    #         #   report_format: json
    #         #   report_name: gitleaks-api
    #     #   args: detect --source ./api --true

    #   - name: Install Sonar Scanner
    #     run: |
    #       sudo apt-get update && sudo apt-get install -y unzip
    #       curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-5.0.1.3006-linux.zip
    #       unzip sonar-scanner.zip -d /opt
    #       mv /opt/sonar-scanner-* $SCANNER_HOME
    #       echo "$SCANNER_HOME/bin" >> $GITHUB_PATH


      # - name: Install SonarScanner
      #   run: |
      #         curl -sSL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -o sonar-scanner.zip
      #         unzip sonar-scanner.zip
      #         sudo mv sonar-scanner-*/ /opt/sonar-scanner
      #         echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH


      # - name: Run Sonar Scanner
      #   run: |
      #     sonar-scanner \
      #       -Dsonar.projectKey=NodeJS-Project \
      #       -Dsonar.projectName=NodeJS-Project \
      #       -Dsonar.host.url=$SONAR_HOST_URL \
      #       -Dsonar.login=$SONAR_TOKEN

      - name: Install Trivy
        run: |
            sudo apt-get update
            sudo apt-get install -y wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install -y trivy


      - name: Trivy FS Scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'fs-report.html'

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Backend Image
        run: |
          cd api
          docker build -t praveena31/backend:latest .
          trivy image --format table -o backend-image-report.html praveena31/backend:latest
          docker push praveena31/backend:latest

      - name: Build & Push Frontend Image
        run: |
          cd client
          docker build -t praveena31/frontend:latest .
          trivy image --format table -o frontend-image-report.html praveena31/frontend:latest
          docker push praveena31/frontend:latest

  deploy_to_kubernetes:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

    # Login to Azure
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Setup kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Create namespace if not exists
        run: |
             kubectl get namespace prod || kubectl create namespace prod

    # Get AKS credentials and set kubeconfig
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          # creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

    # Deploy manifests to AKS
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s-prod/sc.yaml   
          kubectl apply -f k8s-prod/mysql.yaml 
          kubectl apply -f k8s-prod/backend.yaml 
          kubectl apply -f k8s-prod/frontend.yaml 
          kubectl apply -f k8s-prod/ci.yaml 
          kubectl apply -f k8s-prod/ingress.yaml
